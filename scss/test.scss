$font-stack:  Helvetica, sans-serif;  
$primary-color: #333;  
$main-color: red;


body {  
font: 100% $font-stack;  
color: $primary-color;  
} 

.container { width: 100%; } 

p {
$main-color: blue;  // local decl.
color: $main-color;
}

a {
color: $main-color;
}

div {
$main-color: darkorange !global;  // override  - dont use this type of !global 
color: $main-color;
background-color : rgb(135, 204, 166); 
}
p {
color: $main-color;
}
h2 {  
font-size: 15px + 2; //default font size is px.
width: 3px * 5 + 5px; // follows BODMAS rules gives 20.
}
h2 {  
font-size: 15 * 2px; //default font size is px. dividedby is not worked and 15px * 2px not worked.
font-size: (16px / 24px) ; // this will work. since both px cancel out and default value is px.
}

// Mixins 
@mixin border-radius($radius) {  
-webkit-border-radius: $radius;  
    -moz-border-radius: $radius;  
    -ms-border-radius: $radius;  
        border-radius: $radius;  
}

.box { @include border-radius(10px); }  

// Mixin like plugin
@mixin style {   
.cont{  
    background-color: #77C1EF;  
    color: yellow;  
        }  
h3 {  
    color: red;  
    }  
    
} 


@include style;  
// mixin functions with parameters
@mixin bordered($color, $width: 2px) {  
color: darkorange;  
border: $width solid black;  
width: 500px;  
}  

.mystyle  {  
@include bordered($color: darkred, $width: 5px);  
}  
// one of parameters can take any no of inputs
@mixin linear-gradient($direction, $gradients...) {  
background-color: nth($gradients, 1);  
background-image: linear-gradient($direction, $gradients);  
} 

.myselector {  
@include linear-gradient(to right, 
    magenta, red, orange, yellow, green, blue, purple);  
}
// adding extra rules to main content depending on requirement -- used in framework development
@mixin element{  
@content;  
}

@include element{  
.myblock{  
    color: blue;  
} 

} 
h2  {  
color: violet;  
}  

// media query implementation
.style{  
    width: 500px;  
    @media screen and (orientation: portrait){  
    width:200px;  
    margin-left: 80px;  
    }  
}
// inheritance in css
.message {  
    border: 1px solid #ccc;  
    padding: 10px;  
    color: #333;  
  } 

.success {  
    @extend .message;  
    border-color: green;  
  }  
.error {  
    @extend .message;  
    border-color: red;  
  }  
.warning {  
    @extend .message;  
    border-color: yellow;  
  } 
// get unique id & print css in console
$font-sizes: 10px + 20px;  
$style: (  
  color: #bdc3c7  
); 
@debug $style;  // outputs on the console (window command prompt).
$myval: unique-id() ; // built-in fn - returns a random unique CSS id.
.container{  
    @debug $style;  
    @debug $font-sizes;  // outputs on the console (window command prompt).
    @debug  $myval;
} 
//print warnings when not as per requirement
$main-color:  #bdc3c7;  
@warn "Darker: " darken($main-color, 30%);

//print error 
$colors: (  
  blue: #c0392b,  
  black: #2980b9,  
);  

@function style-variation($style) {  
  @if map-has-key($colors, $style) {  
    @return map-get($colors, $style);  
  }  
  @error "Invalid color: '#{$style}'.";  
} 
.container {  
  $style: style-variation(blue); 
} 
// extending normal css with new requirements
.button-base {
    margin: 2px;
    border-radius: 2px;
 }
 .error-button {
    @extend .button-base;
    background-color: red;
 }
 .menu-button-error {
    @extend .error-button;
 }
 .error-base {
    background-color: red;
 }
  // multiple inhertance
 .error-button02 { // this child has properties of its own.
    @extend .button-base;
    @extend .error-base;
 }
 @media print {
    .text {
       font-family: Sans Serif;
    }
 
    p {
       @extend .text;
       color: black;
    }
 }
 // if else  only for static data ; for dynamic use JS
 $type: lake;  
 aside {  
   @if $type == ocean {  
     color: blue;  
   } @else if $type == river {  
     color: red;  
   } @else if $type == lake {  
     color: green;  
   } @else {  
     color: black;  
   }  
 } 
 // for loop
 @for $i from 1 through 4 {  
    .p#{$i} { padding-left : $i * 10px; }  
  }  
@each $color in pink, violet, yellow, blue {  
    .banner_#{$color} {  
      background-color: #{$color};  
    }  
} 
// dynamic text color giving
$test: 4;
p {
   @if $test < 5 { 
       color: blue;
       @if $test == 3 {
          text-color: white;
        }
    }
}
//while loop
$p: 3;
@while $p < 5 {
  .item-#{$p} {
        color: red;
        $p : $p + 1;
    }
}
//mixing colors
h2 {  
    color: #468499 + #204479;  
} 
// defining function
@function remy($pxsize) {
    @return ($pxsize/16)+rem;
}

h2 { font-size: remy(32);}
// above code using mixins. since same name can be used by function and mixin
@mixin remy($pxsize) {
  font-size:($pxsize/16)+rem;
}
h3 {
 @include remy(32);
}
// built-in functions
$colour01: RED ;
.mydiv01 {
    color: to-lower-case(quote($colour01)) ; // converts to lowercase and made it as a string
}
// map concept for key value pair
$size: 20px;
$red-map: (light: cyan, medium: #f44336, dark: #b71c1c);
p {
   color: map-get($red-map, light);
   font-size: $size;
}
// screensize size based on width
@mixin respond-to($media) {
    @if $media == handhelds {
      @media only screen and (max-width: 320px) { @content; }
    }
    @else if $media == medium-screens {
      @media only screen and (min-width: 321px) and (max-width: 1024px) { @content; }
    }
    @else if $media == wide-screens {
      @media only screen and (min-width: 1024px) { @content; }
    }
  }
  
  .profile-pic2 {
    float: left;
    width: 250px;
    @include respond-to(handhelds) { width: 100% ;}
    @include respond-to(medium-screens) { width: 125px; }
    @include respond-to(wide-screens) { float: none; }
  }
  .fill{
      width:200px;
      height:20px;
      color:red;
  }
